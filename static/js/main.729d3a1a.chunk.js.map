{"version":3,"sources":["components/svg/airplane.svg","components/svg/location.svg","components/svg/text.svg","components/results.jsx","components/calendar.jsx","components/capture.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Results","props","bcbp","JSON","parse","stringify","this","values","closed","Object","keys","map","key","Math","random","React","Component","Calendar","id","className","alt","src","airplane","location","text","Capture","thing","e","console","log","state","result_string","bcbp_result","document","getElementById","remove","w","Worker","ready","onmessage","data","window","stream","string_result","setTimeout","a","async","scanBarcode","localStorage","barcode","setState","clear","terminate","parseBCBP","href","Fragment","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,iOCEtBC,E,YACnB,WAAYC,GAAQ,qEACZA,I,sEAIN,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,UAAUC,KAAKL,MAAMM,SAChD,OACE,6BACA,6BAASC,OAAO,QACd,kDACCN,EAAOO,OAAOC,KAAKR,GAAMS,KAAI,SAAAC,GAAG,OAC/B,uBAAGA,IAAKC,KAAKC,UAAWF,EAAxB,KAA+BV,EAAKU,OAClC,W,GAbyBG,IAAMC,W,mDCItBC,E,YACnB,WAAYhB,GAAQ,qEACZA,I,iFAGKE,KAAKC,MAAMD,KAAKE,UAAUC,KAAKL,MAAMM,W,+BAIhD,OACE,yBAAKW,GAAG,YAEN,yBAAKC,UAAU,WACb,yBAAKC,IAAI,gBAAgBC,IAAKC,MAC9B,mDACA,uBAAGH,UAAU,aAAb,4CAGF,yBAAKA,UAAU,WACb,yBAAKC,IAAI,gBAAgBC,IAAKE,MAC9B,mDACA,uBAAGJ,UAAU,aAAb,4CAGF,yBAAKA,UAAU,WACb,yBAAKC,IAAI,gBAAgBC,IAAKG,MAC9B,mDACA,uBAAGL,UAAU,aAAb,iD,GA3B4BJ,IAAMC,WCFvBS,E,YACnB,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAuCRyB,MAAQ,SAACC,GACPC,QAAQC,IAAI,EAAKC,MAAMC,eACvBH,QAAQC,IAAI,EAAKC,MAAME,cAxCvB,EAAKF,MAAQ,CACXC,cAAe,KACfC,YAAa,MAJE,E,iFAOE,IAAD,OAClBC,SAASC,eAAe,YAAYC,SACpCF,SAASC,eAAe,gBAAgBC,SACxC,IAAIC,EAAI,IAAIC,OAAO,mBACfC,EAAQ,EACZF,EAAEG,UAAY,SAACZ,IACbC,QAAQC,IAAIF,EAAEa,MACVC,OAAOC,QAAUf,EAAEa,KAAO,KAEb,OADFC,OAAOE,eACa,IAAVL,IACrBM,YAAW,oBAAAC,EAAAC,OAAA,gDAAkBL,OAAOM,cAAzB,uCAA0C,KACrDT,EAAQ,IAIRU,aAAaC,SACf,EAAKC,SAAS,CACZnB,cAAeiB,aAAaC,UAC3B,WACDD,aAAaG,QACbf,EAAEgB,YACF,EAAKF,SAAS,CACZlB,YAAaqB,oBAAU,EAAKvB,MAAMC,iBACjC,WACAH,QAAQC,IAAI,EAAKC,MAAME,aACvBI,EAAEgB,qB,+BAcX,OACE,6BAEE,wBAAIlC,GAAG,WAAP,wCAAsD,uBAAGoC,KAAK,6FAAR,QAAtD,OAAsK,uBAAGA,KAAK,4FAAR,QAAtK,KACChD,KAAKwB,MAAME,YACV,kBAAC,IAAMuB,SAAP,KACE,kBAAC,EAAD,CAAUhD,OAAQD,KAAKwB,MAAME,eAE9B,KACD,6BAEE,kBAAC,EAAD,CAASzB,OAAQD,KAAKwB,MAAME,cAE9B,kC,GA5D2BjB,IAAMC,WCQ5BwC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCKcsC,QACW,cAA7BhB,OAAOlB,SAASmC,UAEe,UAA7BjB,OAAOlB,SAASmC,UAEhBjB,OAAOlB,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD6H3C,kBAAmB4B,WACrBA,UAAUC,cAAczB,MAAM0B,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.729d3a1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/airplane.2e6814f3.svg\";","module.exports = __webpack_public_path__ + \"static/media/location.b2f804bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/text.de40f805.svg\";","import React from 'react';\n\nexport default class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let bcbp = JSON.parse(JSON.stringify(this.props.values));\n    return (\n      <div>\n      <details closed=\"true\">\n        <summary>Debug Details</summary>\n        {bcbp ? Object.keys(bcbp).map(key => \n          <p key={Math.random()}>{key}: {bcbp[key]}</p>\n        ) : null}\n         </details>\n      </div>\n    );\n  }\n}\n\n\n","import React from 'react';\nimport airplane from './svg/airplane.svg';\nimport location from './svg/location.svg';\nimport text from './svg/text.svg';\n\n\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    let bcbp = JSON.parse(JSON.stringify(this.props.values));\n  }\n\n  render() {\n    return (\n      <div id=\"calendar\">\n\n        <div className=\"section\">\n          <img alt=\"Airplane Icon\" src={airplane} />\n          <h3>Flight to Amsterdam</h3>\n          <p className=\"minor-txt\">Monday, December 23rd - 7:30pm - 8:30pm</p>\n        </div>\n\n        <div className=\"section\">\n          <img alt=\"Airplane Icon\" src={location} />\n          <h4>Flight to Amsterdam</h4>\n          <p className=\"minor-txt\">Monday, December 23rd - 7:30pm - 8:30pm</p>\n        </div>\n\n        <div className=\"section\">\n          <img alt=\"Airplane Icon\" src={text} />\n          <h4>Flight to Amsterdam</h4>\n          <p className=\"minor-txt\">Monday, December 23rd - 7:30pm - 8:30pm</p>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n","import React from \"react\";\nimport { parseBCBP } from 'bcbp-parser';\nimport Results from \"./results.jsx\"\nimport Calendar from \"./calendar.jsx\"\nexport default class Capture extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result_string: null, \n      bcbp_result: null\n    }\n  }\n  componentDidMount() {\n    document.getElementById(\"pcCanvas\").remove();\n    document.getElementById(\"mobileCanvas\").remove();\n    let w = new Worker(\"result_check.js\");\n    let ready = 0\n    w.onmessage = (e) => {\n      console.log(e.data);\n      if (window.stream && e.data < 5) {\n        let status = window.string_result\n        if (status === null && ready === 0) {\n          setTimeout(async function(){ window.scanBarcode() }, 1000);\n          ready = 1\n        }\n      }\n      // console.log(this.state.result_string)\n      if (localStorage.barcode) {\n        this.setState({\n          result_string: localStorage.barcode\n        }, ()=> {\n          localStorage.clear();\n          w.terminate();\n          this.setState({\n            bcbp_result: parseBCBP(this.state.result_string)\n          }, ()=>{\n             console.log(this.state.bcbp_result);\n             w.terminate();\n          });\n        });\n      }\n    };\n  }\n\n\n  thing = (e) => {\n    console.log(this.state.result_string);\n    console.log(this.state.bcbp_result);\n  }\n\n   render() {\n    return (\n      <div>\n        \n        <h3 id=\"headtxt\">Scan a boarding pass that looks like <a href=\"https://raw.githubusercontent.com/x8BitRain/ticket2calendar/master/public/pdf417_bcbp.png\">this</a> or <a href=\"https://raw.githubusercontent.com/x8BitRain/ticket2calendar/master/public/aztec_bcbp.png\">this</a>.</h3>\n        {this.state.bcbp_result ?\n          <React.Fragment> \n            <Calendar values={this.state.bcbp_result} />\n          </React.Fragment>\n         : null}\n          <br></br>\n          \n            <Results values={this.state.bcbp_result} />\n         \n          <br></br>\n      </div>\n    );\n  }\n}\n\n        // {this.state.bcbp_result ? <Results results={} /> : null}\n","import React from 'react';\nimport './App.scss';\nimport Capture from './components/capture.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Capture />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}