{"version":3,"sources":["logo.svg","components/capture.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Capture","props","thing","e","console","log","state","result_string","bcbp_result","document","getElementById","remove","w","Worker","onmessage","localStorage","barcode","setState","clear","terminate","parseBCBP","id","this","onClick","detect","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,8JCGtBC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAkCRC,MAAQ,SAACC,GACPC,QAAQC,IAAI,EAAKC,MAAMC,eACvBH,QAAQC,IAAI,EAAKC,MAAME,cAnCvB,EAAKF,MAAQ,CACXC,cAAe,KACfC,YAAa,IAJE,E,iFAOE,IAAD,OAClBC,SAASC,eAAe,YAAYC,SACpCF,SAASC,eAAe,gBAAgBC,SACxC,IAAIC,EAAI,IAAIC,OAAO,mBACnBD,EAAEE,UAAY,WACZV,QAAQC,IAAI,EAAKC,MAAMC,eACnBQ,aAAaC,SACf,EAAKC,SAAS,CACZV,cAAeQ,aAAaC,UAC3B,WACDD,aAAaG,QACbN,EAAEO,YACFf,QAAQC,IAAI,EAAKC,MAAMC,eACvB,EAAKU,SAAS,CACZT,YAAaY,oBAAU,EAAKd,MAAMC,uB,+BAoB1C,OACE,6BACE,yBAAKc,GAAG,QACyB,SAA7BC,KAAKhB,MAAMC,cAA2B,wCAAoB,KAC9D,4BAAQgB,QAASD,KAAKE,QAAtB,WACA,4BAAQD,QAASD,KAAKpB,OAAtB,iB,GA/C6BuB,IAAMC,WCU5BC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAASC,eAAe,SD6H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.63269397.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { parseBCBP } from 'bcbp-parser';\n\nexport default class Capture extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result_string: null, \n      bcbp_result: {}\n    }\n  }\n  componentDidMount() {\n    document.getElementById(\"pcCanvas\").remove();\n    document.getElementById(\"mobileCanvas\").remove();\n    let w = new Worker(\"result_check.js\");\n    w.onmessage = () => {\n      console.log(this.state.result_string)\n      if (localStorage.barcode) {\n        this.setState({\n          result_string: localStorage.barcode\n        }, ()=> {\n          localStorage.clear();\n          w.terminate();\n          console.log(this.state.result_string);\n          this.setState({\n            bcbp_result: parseBCBP(this.state.result_string)\n          });\n        });\n      }\n    };\n  }\n\n  // detect = () => {\n  //   this.setState({ result_string:window.string_result }, () => {\n  //     console.log(this.state.result_string);\n  //     console.log(parseBCBP(this.state.result_string))\n  //   });\n  // };\n\n  thing = (e) => {\n    console.log(this.state.result_string);\n    console.log(this.state.bcbp_result);\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"dbr\" ></div> \n          { this.state.result_string === \"test\" ? <h1>BIG TEST</h1> : null }\n        <button onClick={this.detect}>result!</button>\n        <button onClick={this.thing}>do thing</button>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Capture from './components/capture.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Capture />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}